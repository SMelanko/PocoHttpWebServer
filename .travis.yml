language: cpp

sudo: required
dist: trusty

matrix:
  include:

    ###########################################################################
    # Xcode on macOS.
    #

    #
    # Xcode 8.0 Release.
    #
    - os: osx
      env:
        - CXX_COMPILER=clang++
        - BUILD_TYPE=Release
      osx_image: xcode8.0
      compiler: clang
      script:
        - cd "${TRAVIS_BUILD_DIR}"
        - mkdir -p build && cd build
        - conan install .. --build missing -s build_type=${BUILD_TYPE}
        - cmake .. -DCMAKE_BUILD_TYPE:STRING=${BUILD_TYPE}
        - cmake --build . --config ${BUILD_TYPE} -- -j2

    #
    # Xcode 9.0 Release.
    #
    - os: osx
      env:
        - CXX_COMPILER=clang++
        - BUILD_TYPE=Release
      osx_image: xcode9.0
      compiler: clang
      script:
        - cd "${TRAVIS_BUILD_DIR}"
        - mkdir -p build && cd build
        - conan install .. --build missing -s build_type=${BUILD_TYPE}
        - cmake .. -DCMAKE_BUILD_TYPE:STRING=${BUILD_TYPE}
        - cmake --build . --config ${BUILD_TYPE} -- -j2

    ###########################################################################
    # GCC on Linux.
    #

#    #
#    # Git Check
#    #
#    - os: linux
#      env:
#        - JOB="Git Check"
#      script:
#        - |
#          if [[ -n $(git diff --check HEAD^) ]]; then
#            echo "You must remove whitespaces before submitting a pull request"
#            echo ""
#            git diff --check HEAD^
#            exit -1
#          fi

    #
    # GCC 5 Release.
    #
    - os: linux
      env:
        - JOB="GCC 5 Release"
        - CC_COMPILER=gcc-5
        - CXX_COMPILER=g++-5
        - BUILD_TYPE=Release
      addons: &gcc5
        apt:
          packages:
            - gcc-5
            - g++-5
          sources:
            - ubuntu-toolchain-r-test
      script:
        - cd "${TRAVIS_BUILD_DIR}"
        - mkdir -p build && cd build
        - |
          conan install .. --build missing \
            -s build_type=${BUILD_TYPE} \
            -s compiler.libcxx=libstdc++11
        - cmake .. -DCMAKE_BUILD_TYPE:STRING=${BUILD_TYPE}
        - cmake --build . --config ${BUILD_TYPE} -- -j2

    #
    # GCC 6 Release.
    #
    - os: linux
      env:
        - JOB="GCC 6 Release"
        - CC_COMPILER=gcc-6
        - CXX_COMPILER=g++-6
        - BUILD_TYPE=Release
      addons: &gcc6
        apt:
          packages:
            - gcc-6
            - g++-6
          sources:
            - ubuntu-toolchain-r-test
      script:
        - cd "${TRAVIS_BUILD_DIR}"
        - mkdir -p build && cd build
        - |
          conan install .. --build missing \
            -s build_type=${BUILD_TYPE} \
            -s compiler.libcxx=libstdc++11
        - cmake .. -DCMAKE_BUILD_TYPE:STRING=${BUILD_TYPE}
        - cmake --build . --config ${BUILD_TYPE} -- -j2

    #
    # GCC 7 Release.
    #
    - os: linux
      env:
        - JOB="GCC 7 Release"
        - CC_COMPILER=gcc-7
        - CXX_COMPILER=g++-7
        - BUILD_TYPE=Release
      addons: &gcc7
        apt:
          packages:
            - gcc-7
            - g++-7
          sources:
            - ubuntu-toolchain-r-test
      script:
        - cd "${TRAVIS_BUILD_DIR}"
        - mkdir -p build && cd build
        - |
          conan install .. --build missing \
            -s build_type=${BUILD_TYPE} \
            -s compiler.libcxx=libstdc++11
        - cmake .. -DCMAKE_BUILD_TYPE:STRING=${BUILD_TYPE}
        - cmake --build . --config ${BUILD_TYPE} -- -j2

    #
    # GCC 7 Debug + Codecov and Coveralls.
    #
    - os: linux
      env:
        - JOB="GCC 7 Debug + Codecov and Coveralls"
        - CC_COMPILER=gcc-7
        - CXX_COMPILER=g++-7
        - BUILD_TYPE=Debug
        - ENABLE_TESTING=TRUE
        - ENABLE_COVERAGE=TRUE
      addons: *gcc7
      before_install:
        - pip install --user cpp-coveralls
      script:
        - cd "${TRAVIS_BUILD_DIR}"
        - mkdir -p build && cd build
        - |
          conan install .. --build missing \
            -s build_type=${BUILD_TYPE} \
            -s compiler.libcxx=libstdc++11
        - |
          cmake .. \
            -DCMAKE_BUILD_TYPE:STRING=${BUILD_MODE} \
            -DENABLE_TESTING:BOOL=${ENABLE_TESTING} \
            -DENABLE_COVERAGE:BOOL=${ENABLE_COVERAGE}
        - cmake --build . --config ${BUILD_TYPE} -- -j2
      after_success:
        - ctest --extra-verbose --parallel 2
        - |
          # Codecov - upload the report.
          bash <(curl -s https://codecov.io/bash)
          # Coveralls - upload the report.
          cd ..
          coveralls --build-root build --gcov-options '\-lp' \
            -e build/external \
            -e build/catch \
            -e cmake \
            -E ".*CMakeFiles.*"

    #
    # GCC 7 Debug + Cppcheck.
    #
    - os: linux
      env:
        - JOB="GCC 7 Debug + Cppcheck"
        - CC_COMPILER=gcc-7
        - CXX_COMPILER=g++-7
        - BUILD_TYPE=Debug
        - ENABLE_CPPCHECK=TRUE
      addons: *gcc7
      script:
        - cd "${TRAVIS_BUILD_DIR}"
        - mkdir -p build && cd build
        - |
          conan install .. --build missing \
            -s build_type=${BUILD_TYPE} \
            -s compiler.libcxx=libstdc++11
        - |
          cmake .. \
            -DCMAKE_BUILD_TYPE:STRING=${BUILD_MODE} \
            -DENABLE_CPPCHECK:BOOL=${ENABLE_CPPCHECK}
        - cmake --build . --config ${BUILD_TYPE} -- -j2
      after_success:
        - make check

    #
    # GCC 7 Debug + Clang-Tidy-6.0.
    #
    - os: linux
      env:
        - JOB="GCC 7 Debug + Clang-Tidy-6.0"
        - CC_COMPILER=gcc-7
        - CXX_COMPILER=g++-7
        - BUILD_TYPE=Debug
        - ENABLE_CLANG_TIDY=TRUE
      addons:
        apt:
          packages:
            - gcc-7
            - g++-7
            - clang-6.0
            - clang-tidy-6.0
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-6.0
      script:
        - cd "${TRAVIS_BUILD_DIR}"
        - mkdir -p build && cd build
        - |
          conan install .. --build missing \
            -s build_type=${BUILD_TYPE} \
            -s compiler.libcxx=libstdc++11
        - |
          cmake .. \
            -DCMAKE_BUILD_TYPE:STRING=${BUILD_MODE} \
            -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=${ENABLE_CLANG_TIDY} \
            -DENABLE_CLANG_TIDY:BOOL=${ENABLE_CLANG_TIDY}
        - cmake --build . --config ${BUILD_TYPE}
      after_success:
        - make tidy

    #
    # GCC 7 Debug + Valgrind.
    #
    - os: linux
      env:
        - JOB="GCC 7 Debug + Valgrind"
        - CC_COMPILER=gcc-7
        - CXX_COMPILER=g++-7
        - BUILD_TYPE=Debug
        - ENABLE_TESTING=TRUE
        - ENABLE_VALGRIND=TRUE
      addons:
        apt:
          packages:
            - gcc-7
            - g++-7
            - valgrind
          sources:
            - ubuntu-toolchain-r-test
      script:
        - cd "${TRAVIS_BUILD_DIR}"
        - mkdir -p build && cd build
        - |
          conan install .. --build missing \
            -s build_type=${BUILD_TYPE} \
            -s compiler.libcxx=libstdc++11
        - |
          cmake .. \
            -DCMAKE_BUILD_TYPE:STRING=${BUILD_MODE} \
            -DENABLE_TESTING:BOOL=${ENABLE_TESTING} \
            -DENABLE_VALGRIND:BOOL=${ENABLE_VALGRIND}
        - cmake --build . --config ${BUILD_TYPE} -- -j2
      after_success:
        - ctest --extra-verbose --parallel 2 -T memcheck

    #
    # GCC 7 Debug + Google Address Sanitizer.
    #
    - os: linux
      env:
        - JOB="GCC 7 Debug + Google Address Sanitizer"
        - CC_COMPILER=gcc-7
        - CXX_COMPILER=g++-7
        - BUILD_TYPE=Debug
        - ENABLE_TESTING=TRUE
        - ENABLE_ASAN=TRUE
      addons: *gcc7
      script:
        - cd "${TRAVIS_BUILD_DIR}"
        - mkdir -p build && cd build
        - |
          conan install .. --build missing \
            -s build_type=${BUILD_TYPE} \
            -s compiler.libcxx=libstdc++11
        - |
          cmake .. \
            -DCMAKE_BUILD_TYPE:STRING=${BUILD_MODE} \
            -DENABLE_TESTING:BOOL=${ENABLE_TESTING} \
            -DENABLE_ASAN:BOOL=${ENABLE_ASAN}
        - cmake --build . --config ${BUILD_TYPE} -- -j2
      after_success:
        - ctest --extra-verbose --parallel 2

    #
    # GCC 7 Debug + Google Memory Sanitizer.
    #
    - os: linux
      env:
        - JOB="GCC 7 Debug + Google Memory Sanitizer"
        - CC_COMPILER=gcc-7
        - CXX_COMPILER=g++-7
        - BUILD_TYPE=Debug
        - ENABLE_TESTING=TRUE
        - ENABLE_MSAN=TRUE
      addons: *gcc7
      script:
        - cd "${TRAVIS_BUILD_DIR}"
        - mkdir -p build && cd build
        - |
          conan install .. --build missing \
            -s build_type=${BUILD_TYPE} \
            -s compiler.libcxx=libstdc++11
        - |
          cmake .. \
            -DCMAKE_BUILD_TYPE:STRING=${BUILD_MODE} \
            -DENABLE_TESTING:BOOL=${ENABLE_TESTING} \
            -DENABLE_MSAN:BOOL=${ENABLE_MSAN}
        - cmake --build . --config ${BUILD_TYPE} -- -j2
      after_success:
        - ctest --extra-verbose --parallel 2

    #
    # GCC 7 Debug + Google Thread Sanitizer.
    #
    - os: linux
      env:
        - JOB="GCC 7 Debug + Google Thread Sanitizer"
        - CC_COMPILER=gcc-7
        - CXX_COMPILER=g++-7
        - BUILD_TYPE=Debug
        - ENABLE_TESTING=TRUE
        - ENABLE_TSAN=TRUE
      addons: *gcc7
      script:
        - cd "${TRAVIS_BUILD_DIR}"
        - mkdir -p build && cd build
        - |
          conan install .. --build missing \
            -s build_type=${BUILD_TYPE} \
            -s compiler.libcxx=libstdc++11
        - |
          cmake .. \
            -DCMAKE_BUILD_TYPE:STRING=${BUILD_MODE} \
            -DENABLE_TESTING:BOOL=${ENABLE_TESTING} \
            -DENABLE_TSAN:BOOL=${ENABLE_TSAN}
        - cmake --build . --config ${BUILD_TYPE} -- -j2
      after_success:
        - ctest --extra-verbose --parallel 2

    ###########################################################################
    # Clang on Linux.
    #

    #
    # Clang 4 Debug + Google Address Sanitizer.
    #
    - os: linux
      env:
        - JOB="Clang 4 Debug + Google Address Sanitizer"
        - CC_COMPILER=clang-4.0
        - CXX_COMPILER=clang++-4.0
        - BUILD_TYPE=Debug
        - ENABLE_TESTING=TRUE
        - ENABLE_ASAN=TRUE
      addons: &clang4
        apt:
          packages:
            - clang-4.0
            - gcc-6
            - g++-6
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-4.0
      script:
        - cd "${TRAVIS_BUILD_DIR}"
        - mkdir -p build && cd build
        - |
          conan install .. --build missing \
            -s build_type=${BUILD_TYPE} \
            -s compiler.libcxx=libstdc++11
        - |
          cmake .. \
            -DCMAKE_BUILD_TYPE:STRING=${BUILD_MODE} \
            -DENABLE_TESTING:BOOL=${ENABLE_TESTING} \
            -DENABLE_ASAN:BOOL=${ENABLE_ASAN}
        - cmake --build . --config ${BUILD_TYPE} -- -j2
      after_success:
        - ctest --extra-verbose --parallel 2

  exclude:
    - os: osx
      compiler: gcc

install:
  # Set up the environment.
  - |
    if [ "${TRAVIS_OS_NAME}" == "linux" ]; then
      # Set the ${CC} variable properly.
      export CC=${CC_COMPILER}
    fi

  # Set the ${CXX} variable properly.
  - export CXX=${CXX_COMPILER}

  # Dependencies required by the CI are installed in ${TRAVIS_BUILD_DIR}/deps/.
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p "${DEPS_DIR}" && cd "${DEPS_DIR}"
  # Install a recent CMake (unless already installed on macOS) and Conan.
  - |
    if [ "${TRAVIS_OS_NAME}" == "linux" ]; then
      CMAKE_VERSION=3.10.0
      CMAKE_ARCH=cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz
      CMAKE_URL="https://cmake.org/files/v${CMAKE_VERSION%.[0-9]}/${CMAKE_ARCH}"
      mkdir cmake && travis_retry wget --no-check-certificate -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
      sudo pip install conan
    else
      brew update
      brew install cmake || brew upgrade cmake
      brew install conan || brew upgrade conan
    fi
